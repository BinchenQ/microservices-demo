name: "Continuous Integration - Pull Request"
on:
  pull_request:
    branches: [ main ]

env:
  GOPROXY: https://goproxy.cn,direct
  DOCKER_BUILDKIT: 0

jobs:
  code-tests:
    runs-on: [self-hosted, ubuntu]
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    # - uses: actions/setup-dotnet@v2
    #   with:
    #     dotnet-version: '6.0'
    - uses: actions/setup-go@v3
      with:
        go-version: '1.18'
    - name: Go Unit Tests
      timeout-minutes: 10
      run: |
        for SERVICE in "shippingservice" "productcatalogservice"; do
          echo "testing $SERVICE..."
          pushd src/$SERVICE
          go test
          popd
        done
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.HUB_USER }}
        password: ${{ secrets.HUB_PWD }}

  deployment-tests:
    runs-on: [self-hosted, local-runner]
    needs: code-tests
    strategy:
      matrix:
        profile: ["local-code"]
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    - name: Generate deploy manifests
      run: make rls
    - name: Build + Deploy PR images to k8s
      timeout-minutes: 20
      run: |
        NAMESPACE="pr${PR_NUMBER}"
        echo "::set-env name=NAMESPACE::$NAMESPACE"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: $NAMESPACE
        EOF
        kubectl apply -f release/*.yaml -n $NAMESPACE
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        PR_NUMBER: ${{ github.event.pull_request.number }}
    - name: Wait For Pods
      timeout-minutes: 20
      run: |
        set -x
        kubectl config set-context --current --namespace=$NAMESPACE
        kubectl wait --for=condition=available --timeout=1000s deployment/redis-cart
        kubectl wait --for=condition=available --timeout=1000s deployment/adservice
        kubectl wait --for=condition=available --timeout=1000s deployment/cartservice
        kubectl wait --for=condition=available --timeout=1000s deployment/checkoutservice
        kubectl wait --for=condition=available --timeout=1000s deployment/currencyservice
        kubectl wait --for=condition=available --timeout=1000s deployment/emailservice
        kubectl wait --for=condition=available --timeout=1000s deployment/frontend
        kubectl wait --for=condition=available --timeout=1000s deployment/loadgenerator
        kubectl wait --for=condition=available --timeout=1000s deployment/paymentservice
        kubectl wait --for=condition=available --timeout=1000s deployment/productcatalogservice
        kubectl wait --for=condition=available --timeout=1000s deployment/recommendationservice
        kubectl wait --for=condition=available --timeout=1000s deployment/shippingservice
    - name: Query EXTERNAL_IP for staging
      timeout-minutes: 5
      run: |
        set -x
        NAMESPACE="pr${PR_NUMBER}"
        get_externalIP() {
          # kubectl get service frontend-external --namespace $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
          kubectl get service frontend-external --namespace $NAMESPACE -o jsonpath='{.spec.clusterIP}'
        }
        until [[ -n "$(get_externalIP)" ]]; do
          echo "Querying for external IP for frontend-external on namespace: $NAMESPACE{}"
        sleep 3
        done
        EXTERNAL_IP=$(get_externalIP)
        echo "::set-env name=EXTERNAL_IP::$EXTERNAL_IP"
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        PR_NUMBER: ${{ github.event.pull_request.number }}
    - name: Smoke Test
      timeout-minutes: 5
      run: |
        set -x
        # start fresh loadgenerator pod
        kubectl delete pod -l app=loadgenerator
        # wait for requests to come in
        REQUEST_COUNT="0"
        while [[ "$REQUEST_COUNT"  -lt "50"  ]]; do
            sleep 5
            REQUEST_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $2}')
        done
        # ensure there are no errors hitting endpoints
        ERROR_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $3}' | sed "s/[(][^)]*[)]//g")
        if [[ "$ERROR_COUNT" -gt "0" ]]; then
          exit 1
        fi
    - name: Comment EXTERNAL_IP
      timeout-minutes: 5
      env:
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          curl \
            -X POST \
            $COMMENTS_URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "ðŸš² PR staged at '"http://${EXTERNAL_IP}"'"}'
          sleep 60
    - name: Clean
      run: kubectl delete ns pr${PR_NUMBER}
